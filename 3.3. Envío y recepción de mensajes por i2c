
///////////////////////////////MASTER///////////////////////////////////////////
#include <Wire.h>
  
/* 
 *  
 * CAPÍTULO III: MÓDULOS DE COMUNICACIÓN
 * CÓDIGO 12: Recepción y envío de mensajes por comunicación I2C   
 * OBJETIVO: Enviar mensajes desde un master hacia un esclavo
 *  Funciones:   Wire.begin()  // Inicializa el hardware del bus
 *               Wire.beginTransmission(address); //Comienza la transmisión
 *               Wire.endTransmission(); // Finaliza la transmisión
 *               Wire.requestFrom(address,nBytes);  //solicita un numero de bytes al esclavo en la dirección address
*/
///////////////////////////////MASTER///////////////////////////////////////////
#include <Wire.h>
int cont=0; //variable de conteo 
void setup() {
Wire.begin(); //inicio de comunicación i2c
Serial.begin(9600);
}

void loop() {
 cont++; //incremento de variable
 Wire.beginTransmission(4); // configuración de esclavo a enviar
 Wire.write(cont);  // envio de mensaje
 Wire.endTransmission(); // fin de comunicación
 delay(1000); // espera

 Wire.requestFrom(4, 2); 
 while(Wire.available()){
  Serial.println("mesaje recibido");
    char c = Wire.read();
  Serial.println(c);
 }
Serial.println();
 delay(1000);
}
///////////////////////////////ESCLAVO////////////////////////////////////////////
#include <Wire.h>
void setup()
{
  Wire.begin(4);     // id de esclavo           
  Wire.onReceive(receiveEvent);  //evento de recepción de mensajes
  Wire.onRequest(requestEvent);
  Serial.begin(9600);   // comunicación serial        
}

void loop()
{
delay(100);
}
void receiveEvent(int bytes){ // evento i2c
  while(Wire.available())  // si existe mensaje por leer
  {
    Serial.println("mensaje recibido");
    int c = Wire.read();  // recibe dato
    Serial.print(c);    //envia por comunicación serial 
  }
}
// function that executes whenever data is requested from master
void requestEvent() {
 Wire.write("Hi");  /*send string on request */
}
